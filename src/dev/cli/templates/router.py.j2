"""{{entity_name}} API router with CRUD operations."""

from fastapi import APIRouter, Depends, HTTPException
from sqlmodel import Session

from src.app.api.http.deps import get_session
from src.app.entities.service.{{entity_name.lower()}} import {{entity_name}}, {{entity_name}}Repository


router = APIRouter()


@router.post("/", response_model={{entity_name}})
def create_{{entity_name.lower()}}(
    {{entity_name.lower()}}: {{entity_name}},
    session: Session = Depends(get_session),
) -> {{entity_name}}:
    """Create a new {{entity_name.lower()}}."""
    repository = {{entity_name}}Repository(session)
    created_{{entity_name.lower()}} = repository.create({{entity_name.lower()}})
    session.commit()
    return created_{{entity_name.lower()}}


@router.get("/{{ "{" }}item_id{{ "}" }}", response_model={{entity_name}})
def get_{{entity_name.lower()}}(
    item_id: str,
    session: Session = Depends(get_session),
) -> {{entity_name}}:
    """Get a {{entity_name.lower()}} by ID."""
    repository = {{entity_name}}Repository(session)
    {{entity_name.lower()}} = repository.get(item_id)
    if {{entity_name.lower()}} is None:
        raise HTTPException(status_code=404, detail="{{entity_name}} not found")
    return {{entity_name.lower()}}


@router.put("/{{ "{" }}item_id{{ "}" }}", response_model={{entity_name}})
def update_{{entity_name.lower()}}(
    item_id: str,
    {{entity_name.lower()}}_update: {{entity_name}},
    session: Session = Depends(get_session),
) -> {{entity_name}}:
    """Update a {{entity_name.lower()}}."""
    repository = {{entity_name}}Repository(session)
    
    # Ensure the ID matches
    {{entity_name.lower()}}_update.id = item_id
    
    try:
        updated_{{entity_name.lower()}} = repository.update({{entity_name.lower()}}_update)
        session.commit()
        return updated_{{entity_name.lower()}}
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))


@router.delete("/{{ "{" }}item_id{{ "}" }}")
def delete_{{entity_name.lower()}}(
    item_id: str,
    session: Session = Depends(get_session),
) -> dict[str, str]:
    """Delete a {{entity_name.lower()}}."""
    repository = {{entity_name}}Repository(session)
    deleted = repository.delete(item_id)
    if not deleted:
        raise HTTPException(status_code=404, detail="{{entity_name}} not found")
    session.commit()
    return {{ "{" }}"message": "{{entity_name}} deleted successfully"{{ "}" }}


@router.get("/", response_model=list[{{entity_name}}])
def list_{{entity_name.lower()}}s(
    session: Session = Depends(get_session),
) -> list[{{entity_name}}]:
    """List all {{entity_name.lower()}}s."""
    repository = {{entity_name}}Repository(session)
    return repository.list_all()