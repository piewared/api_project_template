"""User identity repository for data access."""

from sqlmodel import Session, select

from .entity import UserIdentity
from .table import UserIdentityTable


class UserIdentityRepository:
    """Data access layer for UserIdentity entities.

    This handles all database operations for UserIdentities while keeping
    the data access logic colocated with the UserIdentity entity.
    """

    def __init__(self, session: Session) -> None:
        self._session = session

    def get_by_uid(self, uid: str) -> UserIdentity | None:
        """Get a user identity by UID claim."""
        statement = select(UserIdentityTable).where(UserIdentityTable.uid_claim == uid)
        row = self._session.exec(statement).first()
        if row is None:
            return None
        return UserIdentity.model_validate(row, from_attributes=True)

    def get_by_issuer_subject(self, issuer: str, subject: str) -> UserIdentity | None:
        """Get a user identity by issuer and subject."""
        statement = select(UserIdentityTable).where(
            (UserIdentityTable.issuer == issuer)
            & (UserIdentityTable.subject == subject)
        )
        row = self._session.exec(statement).first()
        if row is None:
            return None
        return UserIdentity.model_validate(row, from_attributes=True)

    def create(self, identity: UserIdentity) -> UserIdentity:
        """Create a new user identity and return it. ID is auto-generated by the entity."""
        row = UserIdentityTable.model_validate(identity, from_attributes=True)
        self._session.add(row)
        return identity  # No need for flush/refresh - entity already has its ID!
