config:
  rate_limiter:
    requests: 10
    window_ms: 5000
    enabled: true
    per_endpoint: true
    per_method: true

  database:
    url: "${DATABASE_URL:-postgresql+asyncpg://user:password@postgres:5432/app_db}"
    pool_size: 20
    max_overflow: 10
    pool_timeout: 30
    pool_recycle: 1800
  temporal:
    enabled: true
    url: "${TEMPORAL_ADDRESS:-temporal:7233}"
    namespace: "default"
    task_queue: "default"
    worker:
      enabled: true
      activities_per_second: 10
      max_concurrent_activities: 100
      max_concurrent_workflows: 100
      poll_interval_ms: 1000
      workflow_cache_size: 100
      max_workflow_tasks_per_second: 100
      max_concurrent_workflow_tasks: 100
      sticky_queue_schedule_to_start_timeout_ms: 10000
      worker_build_id: "api-worker-1"
  redis:
    enabled: true
    url: "${REDIS_URL:-redis://localhost:6379}"
  oidc:
    providers:
      google:
        authorization_endpoint: "https://accounts.google.com/o/oauth2/v2/auth"
        token_endpoint: "https://oauth2.googleapis.com/token"
        userinfo_endpoint: "https://openidconnect.googleapis.com/v1/userinfo"
        end_session_endpoint: "https://accounts.google.com/logout"
        issuer: "https://accounts.google.com"
        jwks_uri: "https://www.googleapis.com/oauth2/v3/certs"
        scopes:
          - openid
          - profile
          - email
        client_id: "${OIDC_GOOGLE_CLIENT_ID}"
        client_secret: "${OIDC_GOOGLE_CLIENT_SECRET}"
        redirect_uri: "${OIDC_GOOGLE_REDIRECT_URI:-http://localhost:8000/auth/google/callback}"
      microsoft:
        authorization_endpoint: "https://login.microsoftonline.com/common/oauth2/v2.0/authorize"
        token_endpoint: "https://login.microsoftonline.com/common/oauth2/v2.0/token"
        userinfo_endpoint: "https://graph.microsoft.com/oidc/userinfo"
        end_session_endpoint: "https://login.microsoftonline.com/common/oauth2/v2.0/logout"
        issuer: "https://login.microsoftonline.com"
        jwks_uri: "https://login.microsoftonline.com/common/discovery/v2.0/keys"
        scopes:
          - openid
          - profile
          - email
        client_id: "${OIDC_MICROSOFT_CLIENT_ID}"
        client_secret: "${OIDC_MICROSOFT_CLIENT_SECRET}"
        redirect_uri: "${OIDC_MICROSOFT_REDIRECT_URI:-http://localhost:8000/auth/microsoft/callback}"
      keycloak:
        issuer: "${OIDC_KEYCLOAK_ISSUER:-http://localhost:8080/realms/master}"
        client_id: "${OIDC_KEYCLOAK_CLIENT_ID}"
        client_secret: "${OIDC_KEYCLOAK_CLIENT_SECRET}"
        scopes:
          - openid
          - profile
          - email
        redirect_uri: "${OIDC_KEYCLOAK_REDIRECT_URI:-http://localhost:8000/auth/web/callback}"
        jwks_uri: "${OIDC_KEYCLOAK_JWKS_URI:-http://localhost:8080/realms/master/protocol/openid-connect/certs}"
        end_session_endpoint: "${OIDC_KEYCLOAK_END_SESSION_ENDPOINT:-http://localhost:8080/realms/master/protocol/openid-connect/logout}"
        userinfo_endpoint: "${OIDC_KEYCLOAK_USERINFO_ENDPOINT:-http://localhost:8080/realms/master/protocol/openid-connect/userinfo}"
        authorization_endpoint: "${OIDC_KEYCLOAK_AUTHORIZATION_ENDPOINT:-http://localhost:8080/realms/master/protocol/openid-connect/auth}"
        token_endpoint: "${OIDC_KEYCLOAK_TOKEN_ENDPOINT:-http://localhost:8080/realms/master/protocol/openid-connect/token}"
    default_provider: "keycloak"
    global_redirect_uri: "${OIDC_REDIRECT_URI:-http://localhost:8000/auth/callback}"
  jwt:
    # JWT Validation Settings
    allowed_algorithms: 
      - "RS256"
      - "RS512" 
      - "ES256"
      - "ES384"
      - "HS256"  # Only if you have shared secrets
    # Audiences that your API accepts (who the tokens are intended for)
    audiences:
      - "${JWT_AUDIENCE:-api://default}"
      - "${JWT_AUDIENCE_SECONDARY:-http://localhost:8000}"
    # Clock skew tolerance in seconds (accounts for time differences between servers)
    clock_skew: 60
    # Token validation settings
    verify_signature: true
    verify_exp: true  # Verify expiration
    verify_nbf: true  # Verify not-before
    verify_iat: true  # Verify issued-at
    require_exp: true
    require_iat: true
    # Claim mappings (how to extract user info from JWT tokens)
    claims:
      user_id: "${JWT_CLAIM_USER_ID:-sub}"        # Usually 'sub' (subject)
      email: "${JWT_CLAIM_EMAIL:-email}"          # Email claim
      roles: "${JWT_CLAIM_ROLES:-roles}"          # Roles/permissions
      groups: "${JWT_CLAIM_GROUPS:-groups}"       # User groups
      scope: "${JWT_CLAIM_SCOPE:-scope}"          # OAuth scopes
      name: "${JWT_CLAIM_NAME:-name}"             # User's full name
      preferred_username: "${JWT_CLAIM_USERNAME:-preferred_username}"
  logging:
    level: "${LOG_LEVEL:-DEBUG}"
    format: "${LOG_FORMAT:-json}" # Options: "json", "plain"
    file: "${LOG_FILE:-logs/app.log}"
    max_size_mb: 10
    backup_count: 5
  app:
    environment: "${APP_ENVIRONMENT:-development}" # Options: "development", "testing", "production"
    host: "${APP_HOST:-localhost}"
    port: "${APP_PORT:-8000}"
    session_max_age: ${SESSION_MAX_AGE:-3600}  # Session max age in seconds
    session_jwt_secret: "${SESSION_JWT_SECRET}"  # Secret for signing session JWTs
    cors:
      origins:
        - "${CORS_ORIGINS:-http://localhost:3000}"
      allow_credentials: true
      allow_methods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allow_headers:
        - Authorization
        - Content-Type
        - X-Requested-With
        - Accept
        - Origin
        - User-Agent
        - DNT
        - Cache-Control
        - X-Mx-ReqToken
        - Keep-Alive
        - X-Requested-With
        - If-Modified-Since
        - X-CSRF-Token


