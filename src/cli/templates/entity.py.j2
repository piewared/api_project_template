"""Entity: {{entity_name}}."""

from typing import Any

from pydantic import Field

from src.app.entities.core._base import Entity


class {{entity_name}}(Entity):
    """{{entity_name}} entity representing a {{entity_name.lower()}} in the system.

    This is the domain model that contains business logic and validation.
    It inherits from Entity to get auto-generated UUID identifiers.
    """

{% for field in fields %}
    {{field.name}}: {{field.type}}{% if field.optional %} | None{% endif %} = Field({% if field.optional %}default=None, {% endif %}description="{{field.description}}")
{% endfor %}

    def __eq__(self, other: Any) -> bool:
        """Compare {{entity_name.lower()}}s by business attributes, ignoring timestamps."""
        if not isinstance(other, {{entity_name}}):
            return False

        return (
            self.id == other.id{% for field in fields %}
            and self.{{field.name}} == other.{{field.name}}{% endfor %}
        )

    def __hash__(self) -> int:
        """Hash based on business attributes, ignoring timestamps."""
        return hash((
            self.id,{% for field in fields %}
            self.{{field.name}},{% endfor %}
        ))