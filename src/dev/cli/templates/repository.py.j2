"""{{entity_name}} repository for data access."""

from sqlmodel import Session

from .entity import {{entity_name}}
from .table import {{entity_name}}Table


class {{entity_name}}Repository:
    """Data access layer for {{entity_name}} entities.

    This handles all database operations for {{entity_name}}s while keeping
    the data access logic colocated with the {{entity_name}} entity.
    """

    def __init__(self, session: Session) -> None:
        self._session = session

    def get(self, {{entity_name.lower()}}_id: str) -> {{entity_name}} | None:
        """Get a {{entity_name.lower()}} by ID."""
        row = self._session.get({{entity_name}}Table, {{entity_name.lower()}}_id)
        if row is None:
            return None
        return {{entity_name}}.model_validate(row, from_attributes=True)

    def create(self, {{entity_name.lower()}}: {{entity_name}}) -> {{entity_name}}:
        """Create a new {{entity_name.lower()}} and return it. ID is auto-generated by the entity."""
        row = {{entity_name}}Table.model_validate({{entity_name.lower()}}, from_attributes=True)
        self._session.add(row)
        return {{entity_name.lower()}}  # No need for flush/refresh - entity already has its ID!

    def update(self, {{entity_name.lower()}}: {{entity_name}}) -> {{entity_name}}:
        """Update an existing {{entity_name.lower()}}."""
        row = self._session.get({{entity_name}}Table, {{entity_name.lower()}}.id)
        if row is None:
            raise ValueError(f"{{entity_name}} with ID {{ "{" }}{{entity_name.lower()}}.id{{ "}" }} not found")

        # Update the row with new values
        for field, value in {{entity_name.lower()}}.model_dump().items():
            setattr(row, field, value)

        return {{entity_name.lower()}}

    def delete(self, {{entity_name.lower()}}_id: str) -> bool:
        """Delete a {{entity_name.lower()}} by ID. Returns True if deleted, False if not found."""
        row = self._session.get({{entity_name}}Table, {{entity_name.lower()}}_id)
        if row is None:
            return False
        self._session.delete(row)
        return True

    def list_all(self) -> list[{{entity_name}}]:
        """List all {{entity_name.lower()}}s."""
        rows = self._session.query({{entity_name}}Table).all()
        return [{{entity_name}}.model_validate(row, from_attributes=True) for row in rows]